(* SPDX-License-Identifier: MIT *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils

library HeroesMint
let one = Uint256 1
let zero = Uint128 0
let true = True
let one_msg = 
    fun (msg : Message) => 
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg   
(* Dummy user-defined ADT *)
type Error =
| CodeIsOracle
| CodeIsPendingRequest
| CodeIsOracleAddressNotSet
| CodeIsOwner
| CodeIsNFTContractAddressNotSet

let make_error =
    fun (result : Error) =>
        let result_code = 
        match result with
        | CodeIsOracle               => Int32 -1
        | CodeIsPendingRequest       => Int32 -2
        | CodeIsOracleAddressNotSet  => Int32 -3
        | CodeIsOwner                => Int32 -4
        | CodeIsNFTContractAddressNotSet => Int32 -5
        end
        in
        { _exception : "Error"; code : result_code }


(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract HeroesMint 
(
    contract_owner: ByStr20
)

(* Mutable fields *)
field oracleAddress: Option ByStr20 = None {ByStr20}
field heroesNFTAddress: Option ByStr20 = None {ByStr20}
field myRequests: Map Uint256 Bool = Emp Uint256 Bool
field requestedCallerCount: Uint256 = Uint256 0
field processedCallerCount: Uint256 = Uint256 0
(* Mapping for caller Address id to caller address *)
field callerAddresses: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(error: Error)
    e = make_error error;
    throw e
end




procedure IsNotOracle(address: ByStr20)
    oracleAddressTmp <- oracleAddress;
    match oracleAddressTmp with
    | Some v =>
        is_oracle = builtin eq v address;
        match is_oracle with
        | False =>
            err = CodeIsOracle;
            ThrowError err
        | True =>
        end
    | None =>
        err = CodeIsOracleAddressNotSet;
        ThrowError err
    end
end


procedure IsNotPendingRequest(id: Uint256)
    isPendingRequest <- exists myRequests[id];
    match isPendingRequest with
    | False =>
        err = CodeIsPendingRequest;
        ThrowError err
    | True =>
    end
end

procedure IsNotOwner(address: ByStr20)
    is_owner = builtin eq contract_owner address;
    match is_owner with
    | False =>
        err = CodeIsOwner;
        ThrowError err
    | True =>
    end
end

(***************************************)
(*             Transitions             *)
(***************************************)

(* @dev: Set Oracle Contract address. Only contract owner allowed to invoke.   *)
(* param oracleAddress:      Address of the oracle contract.                  *)
transition setOracleAddress(oracleAddr : ByStr20)
    IsNotOwner _sender;
    oracleAddressTmp = Some {ByStr20} oracleAddr ;
    oracleAddress := oracleAddressTmp
end

(* @dev: Transition for users to Mint NFT.This transition invokes requestRandomNumber() transition in the oracle contract   *)
transition MintNFT()
    oracleAddressTmp <- oracleAddress;
    heroesNFTAddressTmp <- heroesNFTAddress;
    match oracleAddressTmp with
    | Some v =>
        match heroesNFTAddressTmp with
        | Some heroesValue =>
            msg = {_tag: "requestRandomNumber"; _recipient: v; _amount: zero};
            msgs = one_msg msg;
            send msgs;
            requestedCallerCountTmp <- requestedCallerCount;
            callerAddresses[requestedCallerCountTmp] := _sender;
            tmpVal = builtin add requestedCallerCountTmp one;
            requestedCallerCount := tmpVal
        | None =>
            err = CodeIsNFTContractAddressNotSet;
            ThrowError err
        end
    | None =>
        err = CodeIsOracleAddressNotSet;
        ThrowError err
    end
end

(* @dev: Receive request id from the oracle contract. Only oracle contract allowed to invoke.   *)
(* param id:      Request id.                                                                   *)
transition getRequestId(id: Uint256)
    IsNotOracle _sender;
    myRequests[id] := true;
    e = {_eventname: "ReceivedNewRequestId"; id: id};
    event e
end

(* @dev: Receive Random Number and request id from oracle contract and then invokes Mint() transition of the Heroes NFT contract. Only oracle contract allowed to invoke  *)
(* param randomnumber:      Random Number.                                                                     *)
(* param id:       Request id.                                                                             *)
transition callback(randomnumber: Uint256, id: Uint256)
    IsNotOracle _sender;
    IsNotPendingRequest id;
    e = {_eventname: "RandomNumberReceived"; randomnumber: randomnumber};
    event e;
    delete myRequests[id];
    processedCallerCountTmp <- processedCallerCount;
    callerAddress <- callerAddresses[processedCallerCountTmp];
    delete callerAddresses[processedCallerCountTmp];
    tmpVal = builtin add processedCallerCountTmp one;
    (* Call NFT contract's Mint function with the received random number *)
    (* This contract address must be set as Minter in the NFT Contract *)
    heroesNFTAddressTmp <- heroesNFTAddress;
    msg = {_tag: "Mint"; _recipient: heroesNFTAddressTmp; _amount: zero; to: callerAddress};
    msgs = one_msg msg;
    send msgs
end
